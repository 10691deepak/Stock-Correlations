rolling_correlation <- function(input_data, roll_width = 30, cor_type = "pearson"){
  
  #check on:   use = "pairwise.complete.obs"  <- if this is the input type we really want
  
  #sample data input
  #orange <- data.frame(mtcars$mpg,mtcars$cyl,mtcars$disp)
  
  
  #zoo is necessary for rollapply
  library(zoo)
  
  
  #create correlation matrix (for purpose of gathering names)
  correlation_matrix <- cor(input_data)#
  #we only need to consider the upper portion of the matrix to prevent duplication of correlation values
  #(diag is false since we dont care about comparing data with itself)
  upper_triangle <- upper.tri(correlation_matrix, diag=FALSE)
  
  #names for the correlation columns later on
  correlation_names <- paste(rownames(correlation_matrix)[row(correlation_matrix)[upper_triangle]],rownames(correlation_matrix)[col(correlation_matrix)[upper_triangle]])
  
  #correlation function which takes place inside of rollapply
  #(the input 'x' is provided by rollapply, using the input given to rollapply->(input_data))
  cor_function = function(x){
    #correlation matrix is generated between the stocks (will be rolled (essentially looped) inside rollapply)
    stock_correlation <- cor(x,use = "pairwise.complete.obs", method = cor_type)
    #upper_triangle is a true/false matrix, with only upper triangle of matrix equal to TRUE
    #combining upper_triangle with the stock_correlation matrix prevents duplication and results in a numeric data type
    cor_function_output <- stock_correlation[upper_triangle]
    #returns the numeric cor_function_output
    return(cor_function_output)  
  }
  
  
  #creates the rolling correlation  
  rolling_cor <-  rollapply(input_data, width = roll_width, cor_function, by.column = FALSE)
  
  
  #rolling_cor is turned into a dataframe (only really necessary when just comparing two stocks)
  rolling_cor_df <- as.data.frame(rolling_cor)
  
  #names assigned to rolling_cor_df columns
  colnames(rolling_cor_df) <- correlation_names
  
  return(rolling_cor_df)
}

